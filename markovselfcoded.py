"""Generate Markov text from text files."""
import os
import sys
import discord
from random import choice


def open_and_read_file(file_path):
    """Take file path as string; return text as string.

    Takes a string that is a file path, opens the file, and turns
    the file's contents as one string of text.
    """

    # Open green-eggs.txt, read through str generated by read() and assign to variable.
    contents = open(file_path).read()


    return contents

def make_chains(text_string):
    """Take input text as string; return dictionary of Markov chains.

    A chain will be a key that consists of a tuple of (word1, word2)
    and the value would be a list of the word(s) that follow those two
    words in the input text.

    For example:

        >>> chains = make_chains('hi there mary hi there juanita')

    Each bigram (except the last) will be a key in chains:

        >>> sorted(chains.keys())
        [('hi', 'there'), ('mary', 'hi'), ('there', 'mary')]

    Each item in chains is a list of all possible following words:

        >>> chains[('hi', 'there')]
        ['mary', 'juanita']

        >>> chains[('there','juanita')]
        [None]
    """

    chains = {}

    # Split words by white space
    words = text_string.split()
    for i in range(len(words) - 2):
        bigram = words[i], words[i+1]

        if bigram not in chains.keys():
            chains[bigram] = []
        chains[bigram].append(words[i+2])

    return chains

def generate_markov_chain(chains):
    """Input a bigram dictionary chooses a value to add to the bigram and
    rinse and repeat until it breaks using a while loop.
    """

    # Create vatiable that choose a key at random
    # Uses choice function from import random
    all_words = []

    start_words = choice(list(chains.keys()))
    all_words.extend(start_words)

    # Add a random word from values to the tuple
    third_word = choice(chains[start_words])
    all_words.append(third_word)

    # Look up last two words in all_words as key in chains
    while (all_words[-2], all_words[-1]) in chains.keys():
        # Append a random value of the chain with the key of the last two words
        all_words.append(choice(chains[all_words[-2], all_words[-1]]))

    # # Use FOR loop to select index 1 from dictionary key
    # for idx, word in chains:
    #     words.append(word[idx])
    # # Use RANDOM() to select word from key's value list

    # # Append index 1 and random value word to words list
    # new_key = ( , random(chains.keys()))

# Take our list of words, and create a long string with spaces between the words
    print(' '.join(all_words))
    return ' '.join(all_words)




input_path = 'green-eggs.txt'

# Open the file and turn it into one long string
input_text = open_and_read_file(input_path)

# Get a Markov chain
chains = make_chains(input_text)

# Produce random text
generate_markov_chain = generate_markov_chain(chains)


client = discord.Client()


@client.event
async def on_ready():
    print(f'Successfully connected! Logged in as {client.user}.')


@client.event
async def on_message(message):
    if message.author == client.user:
        return

    await message.channel.send(generate_markov_chain)


client.run(os.environ['DISCORD_TOKEN'])

